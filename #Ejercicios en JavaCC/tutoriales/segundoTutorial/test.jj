options
{
  static = true;
} 

PARSER_BEGIN(test)
class test
{
  public static void main(String [] args) throws ParseException
  {
    try
    {
      test analizador = new test(System.in);
      analizador.Programa();
      System.out.println("Se ha compilado con exito");
    }
    catch (ParseException e)
    {
      System.out.println(e.getMessage());
      System.out.println("Se han encontrado errores");
    }
  }
}

PARSER_END(test)

TOKEN :
{
  < MAIN : "public static void Main ()" > {System.out.println("MAIN ->"+image);}
| 	< PROGRAMA : "Programa" >
  {
    System.out.println("PROGRAMA ->" + image);
  }
| 	< IF : "ien" >
  {
    System.out.println("IF ->" + image);
  }
}

TOKEN :
{
  < LPAREN : "(" >
  {
    System.out.println("LPAREN ->" + image);
  }
| < RPAREN : ")" >
  {
    System.out.println("DPAREN ->" + image);
  }
| < LBRACE : "{" >
  {
    System.out.println("ILLAVE ->" + image);
  }
| < RBRACE : "}" >
  {
    System.out.println("DLLAVE ->" + image);
  }
| < SEMICOLON : ";" >
  {
    System.out.println("PUNTO Y COMA ->" + image);
  }
}

TOKEN :
{
  < ASIGNACION : "=" >
  {
    System.out.print.ln("ASIGNACION ->" + image + "\r\n");
  }
| 	< MENOR : "<" >
  {
    System.out.print.ln("MENOR QUE ->" + image);
  }
}

TOKEN :
{
  < INT : "inum" >
  {
    System.out.print.ln("ENTERO ->" + image + "\r\n");
  }
| < NUMBER : ([ "0"-"9" ])+ >
  {
    System.out.print.ln("NUMERO ->" + image + "\r\n");
  }
| < IDENTIFIER : [ "a"-"z", "A"-"Z" ] ([ "a"-"z", "A"-"Z", "0"-"9", "_" ])* >
  {
    System.out.print.ln("IDENTIFICADOR ->" + image + "\r\n");
  }
}

SKIP :
{
  " "
| "\r\n"
| "\t"
}

void Programa() :
{}
{
  < PROGRAMA > < IDENTIFIER > < LBRACE > Principal() < RBRACE > < EOF >
}

void Principal() :
{}
{
  < MAIN > 
  < LBRACE > Sentencias() < RBRACE >
}

void DeclaracionLocal() :
{}
{
  < INT > < IDENTIFIER > < SEMICOLON > VS()
}

void VS() :
{}
{
  DeclaracionLocal()
| Sentencias()
}

void Sentencias() :
{}
{
  (	
    DeclaracionLocal()
  | SentenciaIf()
  )*
}

void SentenciaIf() :
{}
{
  < IF > < LPAREN > Comparaciones() < RPAREN > < LBRACE > < RBRACE >
}

void Comparaciones() :
{}
{
  Valor() Operadores() Valor()
}

void Valor() :
{}
{
  < IDENTIFIER >
| < NUMBER >
}

void Operadores() :
{}
{
  < MENOR >
}
