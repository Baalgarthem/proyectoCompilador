options
{
  static = true;
}
 
PARSER_BEGIN(ejercicio3)
package ejercicios_comp.ejercicio3;
 
public class ejercicio3
{
  public static void main(String args []) throws ParseException
  {
    ejercicio3 parser = new ejercicio3(System.in);
    System.out.println("Bienvenidos al Compilador");
    System.out.println("-------------------------");
    System.out.println();
    System.out.println("PROGRAMA COMPILADO CORRECTAMENTE");
  }
}
 
PARSER_END(ejercicio3)
 
SKIP :
{ //SALTAR ESPACIOS EN BLANCO
  " "
| "\n"
| "\r"
| "\t"
}
 
TOKEN :
{ //Definición de palabras reservadas.
  < INICIO : "inicio" >
| < 	FIN : "fin" >
| < 	ENTERO : "entero" >
| < 	CADENA : "cadena" >
| < 	FLOTANTE : "flotante" >
| < 	VAR : "var" >
| < 	ESCRIBIR : "escribir" >
| < 	LEER : "Leer" >
| < 	SI : "si" >
| < 	SINO : "sino" >
| < 	ENTONCES : "entonces" >
| < 	SELECCIONA : "selecciona" >
| < 	CASO : "caso" >
| < 	DEFECTO : "defecto" >
| < 	PARA : "para" >
| < 	HASTA : "hasta" >
| < 	SIGUIENTE : "siguiente" >
| < 	HACER : "hacer" >
| < 	MIENTRAS : "mientras" >
}
 
TOKEN :
{ //Area de operadores
  < SUMA : "+" >
| < RESTA : "-" >
| < MULTI : "*" >
| < DIV : "/" >
| < MOD : "%" >
| < MAYOR : ">" >
| < MENOR : "<" >
| < IGUAL : "=" >
| < AND : "&&" >
| < OR : "||" >
| < NOT : "!" >
| < OPA : "(" >
| < OPC : ")" >
}
 
TOKEN :
{ //Area de tokens dinámicos
  < #letra : [ "a"-"z", "A"-"Z" ] >
| < #digitos : [ "0"-"9" ] >
| < IDENTIFICADOR :
    (
      < letra >
    | "_"
    )
    (
      < letra >
    | < digitos > "_"
    )* >
| < VALOR_ENTERO : (< digitos >)+ >
| < VALOR_FLOTANTE : (< digitos >)+ "." (< digitos >)+ >
| < VALOR_CADENA : "\"" (~[ "\"" ])* "\"" >
}
 
void principal() :
{}
{
  < INICIO > < IDENTIFICADOR >
  (
    sentencias()
  )+
  < FIN >
}
 
void sentencias() :
{}
{
  declararVariable()
}
 
void declararVariable() :
{}
{
  < VAR > < IDENTIFICADOR > tipoDato() [ < IGUAL > valor() ]
}
 
void tipoDato() :
{}
{
  < ENTERO >
| < CADENA >
| < FLOTANTE >
}
 
void valor() :
{}
{
  < VALOR_CADENA >
| < VALOR_ENTERO >
| < VALOR_FLOTANTE >
| < IDENTIFICADOR >
}
