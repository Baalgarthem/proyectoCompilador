options
{
  static = true;
}

PARSER_BEGIN(gramaticas)
package tutoriales.gramaticas;
import tutoriales.gramaticas.asignaciones;
import java.*;

public class gramaticas
{
  public static void main(String args []) throws ParseException
  {
    gramaticas parser = new gramaticas(System.in);
    System.out.println("Bienvenidos al Compilador");
    System.out.println("-------------------------");
    parser.principal();
    System.out.println("PROGRAMA COMPILADO CORRECTAMENTE");
  }
}

PARSER_END(gramaticas)

SKIP :
{ //SALTAR ESPACIOS EN BLANCO
  " " //1
| "\n" //2
| "\r" //3
| "\t" //4
}

TOKEN :
{ //Definición de palabras reservadas.
  < INICIO : "inicio" > //5
| < FIN : "fin" >//6
| < ENTERO : "entero" > // 7
| < CADENA : "cadena" > //8 
| < FLOTANTE : "flotante" > //9
| < VAR : "var" > //10
| < ESCRIBIR : "escribir" > // 11
| < LEER : "leer" > // 12
| < SI : "si" > //13
| < SINO : "sino" > //14
| < ENTONCES : "entonces" > //15
| < SELECCIONA : "selecciona" > //16
| < CASO : "caso" > //17
| < DEFECTO : "defecto" > //18
| < ROMPE : "rompe" > //19
| < PARA : "para" > //20
| < HASTA : "hasta" > //21
| < SIGUIENTE : "siguiente" > //22
| < HACER : "hacer" >//23
| < MIENTRAS : "mientras" > //24
}

TOKEN :
{ //Area de operadores
  < SUMA : "+" > //25
| < RESTA : "-" > //26
| < MULTI : "*" > //27
| < DIV : "/" > //28
| < MOD : "%" >//29
| < MAYOR : ">" > //30
| < MENOR : "<" > //31
| < IGUAL : "=" > //32
| < AND : "&&" > //33
| < OR : "||" > //34
| < NOT : "!" > //35
| < OPA : "(" >//36
| < OPC : ")" >//37
| < DP : ":" >//38
}

TOKEN :
{ //Area de tokens dinámicos
  < #letra : [ "a"-"z", "A"-"Z" ] >
| < #digitos : [ "0"-"9" ] >
| < IDENTIFICADOR :
    (
      < letra >
    | "_"
    )
    (
      < letra >
    | < digitos > "_"
    )* >
| < VALOR_ENTERO : (< digitos >)+ >
| < VALOR_FLOTANTE : (< digitos >)+ "." (< digitos >)+ >
| < VALOR_CADENA : "\"" (~[ "\"" ])* "\"" >
}

void principal() :
{}

{
  asignaciones.SetTable();
  < INICIO > < IDENTIFICADOR >
  (
    sentencias()
  )+
  < FIN >
}

void sentencias() :
{}
{
  declararVariable()
| gramaticaEscribir()
| gramaticaLeer()
| gramaticaAsignacion()
| gramaticaSi()
| gramaticaSelecciona()
| gramaticaPara()
| gramaticaHacer()
| gramaticaMientras()
}

void declararVariable() :
{}
{
  < VAR > < IDENTIFICADOR > tipoDato() [ < IGUAL > valor() ]
}

void tipoDato() :
{}
{
  < ENTERO >
| < CADENA >
| < FLOTANTE >
}

void valor() :
{}
{
  < VALOR_CADENA >
| < VALOR_ENTERO >
| < VALOR_FLOTANTE >
| < IDENTIFICADOR >
}

void gramaticaEscribir() :
{}
{
  < ESCRIBIR > < OPA > valor()
  (
    < SUMA > valor()
  )*
  < OPC >
}

void gramaticaLeer() :
{}
{
  < LEER > < OPA > < IDENTIFICADOR > < OPC >
}

void gramaticaAsignacion() :
{}
{
  < IDENTIFICADOR > < IGUAL > operacionSimple()
}

void operacionSimple() :
{}
{
  (
    valor()
  | operacionParentesis()
  )
  (
    operandoAritmetico()
    (
      valor()
    | operacionParentesis()
    )
  )*
}

void operacionParentesis() :
{}
{
  < OPA > operacionSimple() < OPC >
}

void operandoAritmetico() :
{}
{
  < SUMA >
| < RESTA >
| < MULTI >
| < DIV >
| < MOD >
}

void gramaticaSi() :
{}
{
  < SI > condicion() < ENTONCES >
  (
    sentencias()
  )+
  [
    < SINO >
    (
      sentencias()
    )+
  ]
  < FIN > < SI >
}

void condicion() :
{}
{
  condicionSimple()
  (
    opLogico() condicionSimple()
  )*
}

void condicionSimple() :
{}
{
  valor() opRelacional() valor()
}

void opLogico() :
{}
{
  < AND >
| < OR >
}

void opRelacional() :
{}
{
  < MAYOR > [ < IGUAL > ]
| < MENOR > [ < IGUAL > ]
| < IGUAL > < IGUAL >
| < NOT > < IGUAL >
}

void gramaticaSelecciona() :
{}
{
  < SELECCIONA > < OPA > < IDENTIFICADOR > < OPC >
  (
    < CASO > < VALOR_ENTERO > < DP > sentencias() < ROMPE >
  )+
  [ < DEFECTO > < DP > sentencias() < ROMPE > ] 
  < FIN > < SELECCIONA >
}

void gramaticaPara() :
{}
{
  < PARA > < IDENTIFICADOR > < IGUAL > < VALOR_ENTERO > < HASTA > < VALOR_ENTERO >
  (
    sentencias()
  )+
  < SIGUIENTE >
}

void gramaticaMientras() :
{}
{
  < MIENTRAS > < OPA > condicion() < OPC >
  (
    sentencias()
  )+
  < FIN > < MIENTRAS >
}

void gramaticaHacer() :
{}
{
  < HACER >
  (
    sentencias()
  )+
  < FIN > < MIENTRAS > < OPA > condicion() < OPC >
}
