options
{
  static = true;
}

PARSER_BEGIN(ProyectoEtapa2E5)
package ProyectoEtapa2;
import java.io.*;
import java.util.Scanner;

public class ProyectoEtapa2E5
{
  public static void main(String args []) throws ParseException
  {
    System.out.print("SE ESTA LEYENDO EL ARCHIVO...: \n\n");
    String filePath = "D:\\Academico\\Lenguajes y automatas ll\\Proyecto Compilador\\codigoPrueba.txt";
    try
    {
      FileReader fileReader = new FileReader(filePath);
      ProyectoEtapa2E5 parser = new ProyectoEtapa2E5(fileReader);
      parser.definirMain();
      fileReader.close();
    }
    catch (FileNotFoundException e)
    {
      System.out.println("El archivo " + filePath + " no se encuentra");
    }
    catch (IOException e)
    {
      System.out.println("Error al leer el archivo");
    }
  }
}

PARSER_END(ProyectoEtapa2E5)

//======================AREA DE TOKENS======================
SKIP /*PARA IGNORAR*/:
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* PALABRAS RESERVADAS */
{
  < INICIO : "inicio" >
| < HACER : "hacer" >
| < FINAL : "final" >
| < SI : "si" >
| < CUANDO : "cuando" >
| < SINO : "sino" >
| < DEFINE : "define" >
| < PARA : "para" >
| < MIENTRAS : "mientras" >
| < EJECUTAR : "ejecutar" >
| < EVALUAR : "evaluar" >
| < POSIBILIDAD : "posibilidad" >
| < VARIABLE : "variable" >
| < DEFECTO : "defecto" >
| < VERDADERO : "verdadero" >
| < FALSO : "falso" >
| < NULO : "nil" >
| < IMPRIMIR : "puts" >
| < IN : "in" >
}

TOKEN : /* TIPOS DE DATOS*/
{
  < ENTERO : (< DIGITO >)+ >
| < FLOTANTE : (< DIGITO >)+ "." (< DIGITO >)+ >
| < CADENA : "\"" (~[ "\"" ])* "\"" >
}

TOKEN : /* AREA DE OPERADORES */
{
  < MAS : "+" >
| < MENOS : "-" >
| < MULTIPLICACION : "*" >
| < DIVISION : "/" >
}

TOKEN /* DIGITOS, LETRAS Y OTROS*/:
{
  < DIGITO : [ "0"-"9" ] >
| < LETRA : [ "a"-"z", "A"-"Z" ] >
}

TOKEN /* PUNTUACIÓN */:
{
  < PUNTO : "." >
| < COMA : "," >
| < PUNTOYCOMA : ";" >
| < DOBLEPUNTO : ":" >
| < PARENTESIS_IZQUIERDO : "(" >
| < PARENTESIS_DERECHO : ")" >
| < CORCHETE_DERECHO : "]" >
| < CORCHETE_IZQUIERDO : "[" >
| < COMILLA_SIMPLE : "'" >
| < LLAVE_IZQUIERDA : "{" >
| < LLAVE_DERECHA : "}" >
}

TOKEN /* COMPARADORES */:
{
  < IGUAL : "=" >
| < MENOR : "<" >
| < MAYOR : ">" >
| < MENOR_IGUALQUE : "<=" >
| < MAYOR_IGUALQUE : ">=" >
| < DIFERENTE_DE : "!=" >
| < AND : "&&" >
| < OR : "||" >
| < NOT : "!" >
}

//=================AREA DEL MAIN Y LÓGICA RESUMIDA DEL PROGRAMA==================
void definirMain() :
{
}
{
  < DEFINE >(declararVariable())* funcionamientoPrograma() < FINAL >
  {
    System.out.println("--main terminado (Compilaci\u00f3n Exitosa)");
  }
}

void funcionamientoPrograma() :
{}
{
  (
    bucleIf()
  )*
  (
    doWhile()
  )*
  (
    buclePara()
  )*
  (
    declararVariable()
  )*
  (
    sentenciaSwitch()
  )*
  (
    imprimir()
  )*
}

void nombreVariable() :
{}
{
  [ "_" ]
  (
    < LETRA >
  | < DIGITO > "_"
  )*
}

void valorDeUnaVariable() :
{}
{
  < ENTERO >
| < CADENA >
| < LETRA >
| < FLOTANTE >
| booleano()
}

// ==================AREA DE BUCLES ===============================
void bucleIf() :
{}
{
  (
    (
      < SI > condicion() funcionamientoPrograma()
    )+
    (
      < SINO > condicion() funcionamientoPrograma()
      {
        System.out.println("----else terminado");
      }
    )*
    < FINAL >
  )
  {
    System.out.println("----if terminado");
  }
}

void sentenciaSwitch() :
{}
{
  < EVALUAR > nombreVariable()
  (
    < CUANDO > valorDeUnaVariable() funcionamientoPrograma()
  )*
  < FINAL >
  {
    System.out.println("----switch exitoso");
  }
}

void doWhile() :
{}
{
  < HACER > funcionamientoPrograma() < MIENTRAS > condicion() < FINAL >
  {
    System.out.println("----do while terminado");
  }
}

void buclePara() :
{}
{
  < PARA > nombreVariable() < IN > nombreVariable() < HACER > funcionamientoPrograma() < FINAL >
  {
    System.out.println("----bucle for terminado");
  }
}

void condicion() :
{}
{
  < PARENTESIS_IZQUIERDO > nombreVariable() comparador() valorDeUnaVariable() < PARENTESIS_DERECHO >
}

void declararVariable() :
{}
{
  nombreVariable() comparador() valorDeUnaVariable()
}

void comparador() :
{}
{
  (
    < IGUAL >
  | < MENOR >
  | < MAYOR >
  | < MENOR_IGUALQUE >
  | < MAYOR_IGUALQUE >
  | < DIFERENTE_DE >
  | < AND >
  | < OR >
  | < NOT >
  )
}

void operador() :
{}
{
  (
    < MAS >
  | < MENOS >
  | < MULTIPLICACION >
  | < DIVISION >
  )
}

void tipoDato() :
{}
{
  booleano()
| < ENTERO >
| < FLOTANTE >
| < CADENA >
}

void booleano() :
{}
{
  < VERDADERO >
| < FALSO >
| < NULO >
}

void imprimir() :
{}
{
  (< IMPRIMIR > < CADENA >)
}
