options
{
  static = true;
}

PARSER_BEGIN(ejercicio16)
package problemario.ejercicio16;
import java.io.*;
import java.util.*;

public class ejercicio16
{
  public static void main(String args []) throws ParseException
  {
    ejercicio16 parser = new ejercicio16(new StringReader("n28i"));
    Token token = parser.getNextToken();
    if (token.kind == ejercicio16.CADENA_ACEPTADA)
    {
      System.out.println("Lexema aceptado: " + token.image);
    }
    else
    {
      System.out.println("Lexema DENEGADO...");
    }
  }
}

PARSER_END(ejercicio16)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN :
{
  < CADENA_ACEPTADA: (< CONSONANTE > < CADENADIGITOS >  < VOCAL > ) >
}

TOKEN : //primero defino cada token que se ocupará
{
< CONSONANTE: (["b"-"d","f"-"h","j"-"n","p"-"t","v"-"z"]) | (["B"-"D","F"-"H","J"-"N","P"-"T","V"-"Z"])>
| < VOCAL :([ "a", "e", "i", "o", "u" ] | [ "A", "E", "I", "O", "U" ])+ >
| < CADENADIGITOS: ((<DOSOTRES >) (< DIGITOS > )(< SEISONUEVE > ) )? > //Entre las dos letras de inicio y fin puede o no existir una cadena de dígitos que empiezan con 2 o 3 y terminan en 6 o 9.
  
| < DOSOTRES : (["2","3" ])+ >
| < SEISONUEVE: (["6","9"])+ >
| < DIGITOS: (["0"-"9"])* >
| < LETRA : ([ "a"-"z", "A"-"Z" ])* > //cualesquiera numero de letras, puede que ninguna

}
